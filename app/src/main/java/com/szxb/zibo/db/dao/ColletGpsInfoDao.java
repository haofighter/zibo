package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.moudle.function.gps.ColletGpsInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLET_GPS_INFO".
*/
public class ColletGpsInfoDao extends AbstractDao<ColletGpsInfo, Long> {

    public static final String TABLENAME = "COLLET_GPS_INFO";

    /**
     * Properties of entity ColletGpsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Lat = new Property(0, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(1, double.class, "lng", false, "LNG");
        public final static Property Googlelat = new Property(2, double.class, "googlelat", false, "GOOGLELAT");
        public final static Property Googlelng = new Property(3, double.class, "googlelng", false, "GOOGLELNG");
        public final static Property Id = new Property(4, Long.class, "id", true, "_id");
        public final static Property StaionNo = new Property(5, Long.class, "staionNo", false, "STAION_NO");
        public final static Property Diraction = new Property(6, int.class, "diraction", false, "DIRACTION");
    }


    public ColletGpsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ColletGpsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLET_GPS_INFO\" (" + //
                "\"LAT\" REAL NOT NULL ," + // 0: lat
                "\"LNG\" REAL NOT NULL ," + // 1: lng
                "\"GOOGLELAT\" REAL NOT NULL ," + // 2: googlelat
                "\"GOOGLELNG\" REAL NOT NULL ," + // 3: googlelng
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 4: id
                "\"STAION_NO\" INTEGER," + // 5: staionNo
                "\"DIRACTION\" INTEGER NOT NULL );"); // 6: diraction
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLET_GPS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ColletGpsInfo entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getLat());
        stmt.bindDouble(2, entity.getLng());
        stmt.bindDouble(3, entity.getGooglelat());
        stmt.bindDouble(4, entity.getGooglelng());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
 
        Long staionNo = entity.getStaionNo();
        if (staionNo != null) {
            stmt.bindLong(6, staionNo);
        }
        stmt.bindLong(7, entity.getDiraction());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ColletGpsInfo entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getLat());
        stmt.bindDouble(2, entity.getLng());
        stmt.bindDouble(3, entity.getGooglelat());
        stmt.bindDouble(4, entity.getGooglelng());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
 
        Long staionNo = entity.getStaionNo();
        if (staionNo != null) {
            stmt.bindLong(6, staionNo);
        }
        stmt.bindLong(7, entity.getDiraction());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }    

    @Override
    public ColletGpsInfo readEntity(Cursor cursor, int offset) {
        ColletGpsInfo entity = new ColletGpsInfo( //
            cursor.getDouble(offset + 0), // lat
            cursor.getDouble(offset + 1), // lng
            cursor.getDouble(offset + 2), // googlelat
            cursor.getDouble(offset + 3), // googlelng
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // staionNo
            cursor.getInt(offset + 6) // diraction
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ColletGpsInfo entity, int offset) {
        entity.setLat(cursor.getDouble(offset + 0));
        entity.setLng(cursor.getDouble(offset + 1));
        entity.setGooglelat(cursor.getDouble(offset + 2));
        entity.setGooglelng(cursor.getDouble(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setStaionNo(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDiraction(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ColletGpsInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ColletGpsInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ColletGpsInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
