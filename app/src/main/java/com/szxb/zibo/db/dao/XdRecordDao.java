package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.record.XdRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XD_RECORD".
*/
public class XdRecordDao extends AbstractDao<XdRecord, Void> {

    public static final String TABLENAME = "XD_RECORD";

    /**
     * Properties of entity XdRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RecordTag = new Property(0, String.class, "recordTag", false, "RECORD_TAG");
        public final static Property RecordLenth = new Property(1, String.class, "recordLenth", false, "RECORD_LENTH");
        public final static Property Flag = new Property(2, String.class, "flag", false, "FLAG");
        public final static Property RecordVersion = new Property(3, String.class, "recordVersion", false, "RECORD_VERSION");
        public final static Property RecordBigType = new Property(4, String.class, "recordBigType", false, "RECORD_BIG_TYPE");
        public final static Property RecordSmallType = new Property(5, String.class, "recordSmallType", false, "RECORD_SMALL_TYPE");
        public final static Property TradeType = new Property(6, String.class, "tradeType", false, "TRADE_TYPE");
        public final static Property IndustryType = new Property(7, String.class, "industryType", false, "INDUSTRY_TYPE");
        public final static Property PayType = new Property(8, String.class, "payType", false, "PAY_TYPE");
        public final static Property MerchantNum = new Property(9, String.class, "merchantNum", false, "MERCHANT_NUM");
        public final static Property CompanyNum = new Property(10, String.class, "companyNum", false, "COMPANY_NUM");
        public final static Property UnionNum = new Property(11, String.class, "unionNum", false, "UNION_NUM");
        public final static Property LineNum = new Property(12, String.class, "lineNum", false, "LINE_NUM");
        public final static Property CarNum = new Property(13, String.class, "carNum", false, "CAR_NUM");
        public final static Property StationNum = new Property(14, String.class, "stationNum", false, "STATION_NUM");
        public final static Property Longitude = new Property(15, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(16, String.class, "latitude", false, "LATITUDE");
        public final static Property PosSn = new Property(17, String.class, "posSn", false, "POS_SN");
        public final static Property MainPSAM = new Property(18, String.class, "mainPSAM", false, "MAIN_PSAM");
        public final static Property TradePSAM = new Property(19, String.class, "tradePSAM", false, "TRADE_PSAM");
        public final static Property DriverNum = new Property(20, String.class, "driverNum", false, "DRIVER_NUM");
        public final static Property UseCardnum = new Property(21, String.class, "useCardnum", false, "USE_CARDNUM");
        public final static Property TradeTime = new Property(22, String.class, "tradeTime", false, "TRADE_TIME");
        public final static Property TradeNum = new Property(23, String.class, "tradeNum", false, "TRADE_NUM");
        public final static Property TradePay = new Property(24, String.class, "tradePay", false, "TRADE_PAY");
        public final static Property TradePayNum = new Property(25, String.class, "tradePayNum", false, "TRADE_PAY_NUM");
        public final static Property TradeDiscount = new Property(26, String.class, "tradeDiscount", false, "TRADE_DISCOUNT");
        public final static Property CardTradeCount = new Property(27, String.class, "cardTradeCount", false, "CARD_TRADE_COUNT");
        public final static Property CardTradeTAC = new Property(28, String.class, "cardTradeTAC", false, "CARD_TRADE_TAC");
        public final static Property SamTradeCount = new Property(29, String.class, "samTradeCount", false, "SAM_TRADE_COUNT");
        public final static Property CityCode = new Property(30, String.class, "cityCode", false, "CITY_CODE");
        public final static Property CreatCardMechanism = new Property(31, String.class, "creatCardMechanism", false, "CREAT_CARD_MECHANISM");
        public final static Property MainCardType = new Property(32, String.class, "mainCardType", false, "MAIN_CARD_TYPE");
        public final static Property ChildCardType = new Property(33, String.class, "childCardType", false, "CHILD_CARD_TYPE");
        public final static Property Direction = new Property(34, String.class, "direction", false, "DIRECTION");
        public final static Property InCardStatus = new Property(35, String.class, "inCardStatus", false, "IN_CARD_STATUS");
        public final static Property BeforTradePosSn = new Property(36, String.class, "beforTradePosSn", false, "BEFOR_TRADE_POS_SN");
        public final static Property BeforTradeType = new Property(37, String.class, "beforTradeType", false, "BEFOR_TRADE_TYPE");
        public final static Property BeforTradeTime = new Property(38, String.class, "beforTradeTime", false, "BEFOR_TRADE_TIME");
        public final static Property BeforTradePrice = new Property(39, String.class, "beforTradePrice", false, "BEFOR_TRADE_PRICE");
        public final static Property ChangeLineNum = new Property(40, String.class, "changeLineNum", false, "CHANGE_LINE_NUM");
        public final static Property ChangePosSn = new Property(41, String.class, "changePosSn", false, "CHANGE_POS_SN");
        public final static Property ChangeNearTime = new Property(42, String.class, "changeNearTime", false, "CHANGE_NEAR_TIME");
        public final static Property ChangePayPrice = new Property(43, String.class, "changePayPrice", false, "CHANGE_PAY_PRICE");
        public final static Property ExtraDateLenth = new Property(44, String.class, "extraDateLenth", false, "EXTRA_DATE_LENTH");
        public final static Property ExtraDate = new Property(45, String.class, "extraDate", false, "EXTRA_DATE");
        public final static Property NewExtraDate = new Property(46, String.class, "newExtraDate", false, "NEW_EXTRA_DATE");
        public final static Property CreatTime = new Property(47, long.class, "creatTime", false, "CREAT_TIME");
        public final static Property UpdateFlag = new Property(48, String.class, "updateFlag", false, "UPDATE_FLAG");
        public final static Property QrCode = new Property(49, String.class, "qrCode", false, "QR_CODE");
        public final static Property Status = new Property(50, String.class, "status", false, "STATUS");
        public final static Property Balance = new Property(51, long.class, "balance", false, "BALANCE");
        public final static Property VoiceType = new Property(52, int.class, "voiceType", false, "VOICE_TYPE");
        public final static Property PayCommand = new Property(53, String.class, "payCommand", false, "PAY_COMMAND");
        public final static Property LastTradeCount = new Property(54, String.class, "lastTradeCount", false, "LAST_TRADE_COUNT");
    }


    public XdRecordDao(DaoConfig config) {
        super(config);
    }
    
    public XdRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XD_RECORD\" (" + //
                "\"RECORD_TAG\" TEXT UNIQUE ," + // 0: recordTag
                "\"RECORD_LENTH\" TEXT," + // 1: recordLenth
                "\"FLAG\" TEXT," + // 2: flag
                "\"RECORD_VERSION\" TEXT," + // 3: recordVersion
                "\"RECORD_BIG_TYPE\" TEXT," + // 4: recordBigType
                "\"RECORD_SMALL_TYPE\" TEXT," + // 5: recordSmallType
                "\"TRADE_TYPE\" TEXT," + // 6: tradeType
                "\"INDUSTRY_TYPE\" TEXT," + // 7: industryType
                "\"PAY_TYPE\" TEXT," + // 8: payType
                "\"MERCHANT_NUM\" TEXT," + // 9: merchantNum
                "\"COMPANY_NUM\" TEXT," + // 10: companyNum
                "\"UNION_NUM\" TEXT," + // 11: unionNum
                "\"LINE_NUM\" TEXT," + // 12: lineNum
                "\"CAR_NUM\" TEXT," + // 13: carNum
                "\"STATION_NUM\" TEXT," + // 14: stationNum
                "\"LONGITUDE\" TEXT," + // 15: longitude
                "\"LATITUDE\" TEXT," + // 16: latitude
                "\"POS_SN\" TEXT," + // 17: posSn
                "\"MAIN_PSAM\" TEXT," + // 18: mainPSAM
                "\"TRADE_PSAM\" TEXT," + // 19: tradePSAM
                "\"DRIVER_NUM\" TEXT," + // 20: driverNum
                "\"USE_CARDNUM\" TEXT," + // 21: useCardnum
                "\"TRADE_TIME\" TEXT," + // 22: tradeTime
                "\"TRADE_NUM\" TEXT," + // 23: tradeNum
                "\"TRADE_PAY\" TEXT," + // 24: tradePay
                "\"TRADE_PAY_NUM\" TEXT," + // 25: tradePayNum
                "\"TRADE_DISCOUNT\" TEXT," + // 26: tradeDiscount
                "\"CARD_TRADE_COUNT\" TEXT," + // 27: cardTradeCount
                "\"CARD_TRADE_TAC\" TEXT," + // 28: cardTradeTAC
                "\"SAM_TRADE_COUNT\" TEXT," + // 29: samTradeCount
                "\"CITY_CODE\" TEXT," + // 30: cityCode
                "\"CREAT_CARD_MECHANISM\" TEXT," + // 31: creatCardMechanism
                "\"MAIN_CARD_TYPE\" TEXT," + // 32: mainCardType
                "\"CHILD_CARD_TYPE\" TEXT," + // 33: childCardType
                "\"DIRECTION\" TEXT," + // 34: direction
                "\"IN_CARD_STATUS\" TEXT," + // 35: inCardStatus
                "\"BEFOR_TRADE_POS_SN\" TEXT," + // 36: beforTradePosSn
                "\"BEFOR_TRADE_TYPE\" TEXT," + // 37: beforTradeType
                "\"BEFOR_TRADE_TIME\" TEXT," + // 38: beforTradeTime
                "\"BEFOR_TRADE_PRICE\" TEXT," + // 39: beforTradePrice
                "\"CHANGE_LINE_NUM\" TEXT," + // 40: changeLineNum
                "\"CHANGE_POS_SN\" TEXT," + // 41: changePosSn
                "\"CHANGE_NEAR_TIME\" TEXT," + // 42: changeNearTime
                "\"CHANGE_PAY_PRICE\" TEXT," + // 43: changePayPrice
                "\"EXTRA_DATE_LENTH\" TEXT," + // 44: extraDateLenth
                "\"EXTRA_DATE\" TEXT," + // 45: extraDate
                "\"NEW_EXTRA_DATE\" TEXT," + // 46: newExtraDate
                "\"CREAT_TIME\" INTEGER NOT NULL UNIQUE ," + // 47: creatTime
                "\"UPDATE_FLAG\" TEXT," + // 48: updateFlag
                "\"QR_CODE\" TEXT," + // 49: qrCode
                "\"STATUS\" TEXT," + // 50: status
                "\"BALANCE\" INTEGER NOT NULL ," + // 51: balance
                "\"VOICE_TYPE\" INTEGER NOT NULL ," + // 52: voiceType
                "\"PAY_COMMAND\" TEXT," + // 53: payCommand
                "\"LAST_TRADE_COUNT\" TEXT);"); // 54: lastTradeCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XD_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, XdRecord entity) {
        stmt.clearBindings();
 
        String recordTag = entity.getRecordTag();
        if (recordTag != null) {
            stmt.bindString(1, recordTag);
        }
 
        String recordLenth = entity.getRecordLenth();
        if (recordLenth != null) {
            stmt.bindString(2, recordLenth);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(3, flag);
        }
 
        String recordVersion = entity.getRecordVersion();
        if (recordVersion != null) {
            stmt.bindString(4, recordVersion);
        }
 
        String recordBigType = entity.getRecordBigType();
        if (recordBigType != null) {
            stmt.bindString(5, recordBigType);
        }
 
        String recordSmallType = entity.getRecordSmallType();
        if (recordSmallType != null) {
            stmt.bindString(6, recordSmallType);
        }
 
        String tradeType = entity.getTradeType();
        if (tradeType != null) {
            stmt.bindString(7, tradeType);
        }
 
        String industryType = entity.getIndustryType();
        if (industryType != null) {
            stmt.bindString(8, industryType);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(9, payType);
        }
 
        String merchantNum = entity.getMerchantNum();
        if (merchantNum != null) {
            stmt.bindString(10, merchantNum);
        }
 
        String companyNum = entity.getCompanyNum();
        if (companyNum != null) {
            stmt.bindString(11, companyNum);
        }
 
        String unionNum = entity.getUnionNum();
        if (unionNum != null) {
            stmt.bindString(12, unionNum);
        }
 
        String lineNum = entity.getLineNum();
        if (lineNum != null) {
            stmt.bindString(13, lineNum);
        }
 
        String carNum = entity.getCarNum();
        if (carNum != null) {
            stmt.bindString(14, carNum);
        }
 
        String stationNum = entity.getStationNum();
        if (stationNum != null) {
            stmt.bindString(15, stationNum);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(16, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(17, latitude);
        }
 
        String posSn = entity.getPosSn();
        if (posSn != null) {
            stmt.bindString(18, posSn);
        }
 
        String mainPSAM = entity.getMainPSAM();
        if (mainPSAM != null) {
            stmt.bindString(19, mainPSAM);
        }
 
        String tradePSAM = entity.getTradePSAM();
        if (tradePSAM != null) {
            stmt.bindString(20, tradePSAM);
        }
 
        String driverNum = entity.getDriverNum();
        if (driverNum != null) {
            stmt.bindString(21, driverNum);
        }
 
        String useCardnum = entity.getUseCardnum();
        if (useCardnum != null) {
            stmt.bindString(22, useCardnum);
        }
 
        String tradeTime = entity.getTradeTime();
        if (tradeTime != null) {
            stmt.bindString(23, tradeTime);
        }
 
        String tradeNum = entity.getTradeNum();
        if (tradeNum != null) {
            stmt.bindString(24, tradeNum);
        }
 
        String tradePay = entity.getTradePay();
        if (tradePay != null) {
            stmt.bindString(25, tradePay);
        }
 
        String tradePayNum = entity.getTradePayNum();
        if (tradePayNum != null) {
            stmt.bindString(26, tradePayNum);
        }
 
        String tradeDiscount = entity.getTradeDiscount();
        if (tradeDiscount != null) {
            stmt.bindString(27, tradeDiscount);
        }
 
        String cardTradeCount = entity.getCardTradeCount();
        if (cardTradeCount != null) {
            stmt.bindString(28, cardTradeCount);
        }
 
        String cardTradeTAC = entity.getCardTradeTAC();
        if (cardTradeTAC != null) {
            stmt.bindString(29, cardTradeTAC);
        }
 
        String samTradeCount = entity.getSamTradeCount();
        if (samTradeCount != null) {
            stmt.bindString(30, samTradeCount);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(31, cityCode);
        }
 
        String creatCardMechanism = entity.getCreatCardMechanism();
        if (creatCardMechanism != null) {
            stmt.bindString(32, creatCardMechanism);
        }
 
        String mainCardType = entity.getMainCardType();
        if (mainCardType != null) {
            stmt.bindString(33, mainCardType);
        }
 
        String childCardType = entity.getChildCardType();
        if (childCardType != null) {
            stmt.bindString(34, childCardType);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(35, direction);
        }
 
        String inCardStatus = entity.getInCardStatus();
        if (inCardStatus != null) {
            stmt.bindString(36, inCardStatus);
        }
 
        String beforTradePosSn = entity.getBeforTradePosSn();
        if (beforTradePosSn != null) {
            stmt.bindString(37, beforTradePosSn);
        }
 
        String beforTradeType = entity.getBeforTradeType();
        if (beforTradeType != null) {
            stmt.bindString(38, beforTradeType);
        }
 
        String beforTradeTime = entity.getBeforTradeTime();
        if (beforTradeTime != null) {
            stmt.bindString(39, beforTradeTime);
        }
 
        String beforTradePrice = entity.getBeforTradePrice();
        if (beforTradePrice != null) {
            stmt.bindString(40, beforTradePrice);
        }
 
        String changeLineNum = entity.getChangeLineNum();
        if (changeLineNum != null) {
            stmt.bindString(41, changeLineNum);
        }
 
        String changePosSn = entity.getChangePosSn();
        if (changePosSn != null) {
            stmt.bindString(42, changePosSn);
        }
 
        String changeNearTime = entity.getChangeNearTime();
        if (changeNearTime != null) {
            stmt.bindString(43, changeNearTime);
        }
 
        String changePayPrice = entity.getChangePayPrice();
        if (changePayPrice != null) {
            stmt.bindString(44, changePayPrice);
        }
 
        String extraDateLenth = entity.getExtraDateLenth();
        if (extraDateLenth != null) {
            stmt.bindString(45, extraDateLenth);
        }
 
        String extraDate = entity.getExtraDate();
        if (extraDate != null) {
            stmt.bindString(46, extraDate);
        }
 
        String newExtraDate = entity.getNewExtraDate();
        if (newExtraDate != null) {
            stmt.bindString(47, newExtraDate);
        }
        stmt.bindLong(48, entity.getCreatTime());
 
        String updateFlag = entity.getUpdateFlag();
        if (updateFlag != null) {
            stmt.bindString(49, updateFlag);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(50, qrCode);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(51, status);
        }
        stmt.bindLong(52, entity.getBalance());
        stmt.bindLong(53, entity.getVoiceType());
 
        String payCommand = entity.getPayCommand();
        if (payCommand != null) {
            stmt.bindString(54, payCommand);
        }
 
        String lastTradeCount = entity.getLastTradeCount();
        if (lastTradeCount != null) {
            stmt.bindString(55, lastTradeCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, XdRecord entity) {
        stmt.clearBindings();
 
        String recordTag = entity.getRecordTag();
        if (recordTag != null) {
            stmt.bindString(1, recordTag);
        }
 
        String recordLenth = entity.getRecordLenth();
        if (recordLenth != null) {
            stmt.bindString(2, recordLenth);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(3, flag);
        }
 
        String recordVersion = entity.getRecordVersion();
        if (recordVersion != null) {
            stmt.bindString(4, recordVersion);
        }
 
        String recordBigType = entity.getRecordBigType();
        if (recordBigType != null) {
            stmt.bindString(5, recordBigType);
        }
 
        String recordSmallType = entity.getRecordSmallType();
        if (recordSmallType != null) {
            stmt.bindString(6, recordSmallType);
        }
 
        String tradeType = entity.getTradeType();
        if (tradeType != null) {
            stmt.bindString(7, tradeType);
        }
 
        String industryType = entity.getIndustryType();
        if (industryType != null) {
            stmt.bindString(8, industryType);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(9, payType);
        }
 
        String merchantNum = entity.getMerchantNum();
        if (merchantNum != null) {
            stmt.bindString(10, merchantNum);
        }
 
        String companyNum = entity.getCompanyNum();
        if (companyNum != null) {
            stmt.bindString(11, companyNum);
        }
 
        String unionNum = entity.getUnionNum();
        if (unionNum != null) {
            stmt.bindString(12, unionNum);
        }
 
        String lineNum = entity.getLineNum();
        if (lineNum != null) {
            stmt.bindString(13, lineNum);
        }
 
        String carNum = entity.getCarNum();
        if (carNum != null) {
            stmt.bindString(14, carNum);
        }
 
        String stationNum = entity.getStationNum();
        if (stationNum != null) {
            stmt.bindString(15, stationNum);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(16, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(17, latitude);
        }
 
        String posSn = entity.getPosSn();
        if (posSn != null) {
            stmt.bindString(18, posSn);
        }
 
        String mainPSAM = entity.getMainPSAM();
        if (mainPSAM != null) {
            stmt.bindString(19, mainPSAM);
        }
 
        String tradePSAM = entity.getTradePSAM();
        if (tradePSAM != null) {
            stmt.bindString(20, tradePSAM);
        }
 
        String driverNum = entity.getDriverNum();
        if (driverNum != null) {
            stmt.bindString(21, driverNum);
        }
 
        String useCardnum = entity.getUseCardnum();
        if (useCardnum != null) {
            stmt.bindString(22, useCardnum);
        }
 
        String tradeTime = entity.getTradeTime();
        if (tradeTime != null) {
            stmt.bindString(23, tradeTime);
        }
 
        String tradeNum = entity.getTradeNum();
        if (tradeNum != null) {
            stmt.bindString(24, tradeNum);
        }
 
        String tradePay = entity.getTradePay();
        if (tradePay != null) {
            stmt.bindString(25, tradePay);
        }
 
        String tradePayNum = entity.getTradePayNum();
        if (tradePayNum != null) {
            stmt.bindString(26, tradePayNum);
        }
 
        String tradeDiscount = entity.getTradeDiscount();
        if (tradeDiscount != null) {
            stmt.bindString(27, tradeDiscount);
        }
 
        String cardTradeCount = entity.getCardTradeCount();
        if (cardTradeCount != null) {
            stmt.bindString(28, cardTradeCount);
        }
 
        String cardTradeTAC = entity.getCardTradeTAC();
        if (cardTradeTAC != null) {
            stmt.bindString(29, cardTradeTAC);
        }
 
        String samTradeCount = entity.getSamTradeCount();
        if (samTradeCount != null) {
            stmt.bindString(30, samTradeCount);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(31, cityCode);
        }
 
        String creatCardMechanism = entity.getCreatCardMechanism();
        if (creatCardMechanism != null) {
            stmt.bindString(32, creatCardMechanism);
        }
 
        String mainCardType = entity.getMainCardType();
        if (mainCardType != null) {
            stmt.bindString(33, mainCardType);
        }
 
        String childCardType = entity.getChildCardType();
        if (childCardType != null) {
            stmt.bindString(34, childCardType);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(35, direction);
        }
 
        String inCardStatus = entity.getInCardStatus();
        if (inCardStatus != null) {
            stmt.bindString(36, inCardStatus);
        }
 
        String beforTradePosSn = entity.getBeforTradePosSn();
        if (beforTradePosSn != null) {
            stmt.bindString(37, beforTradePosSn);
        }
 
        String beforTradeType = entity.getBeforTradeType();
        if (beforTradeType != null) {
            stmt.bindString(38, beforTradeType);
        }
 
        String beforTradeTime = entity.getBeforTradeTime();
        if (beforTradeTime != null) {
            stmt.bindString(39, beforTradeTime);
        }
 
        String beforTradePrice = entity.getBeforTradePrice();
        if (beforTradePrice != null) {
            stmt.bindString(40, beforTradePrice);
        }
 
        String changeLineNum = entity.getChangeLineNum();
        if (changeLineNum != null) {
            stmt.bindString(41, changeLineNum);
        }
 
        String changePosSn = entity.getChangePosSn();
        if (changePosSn != null) {
            stmt.bindString(42, changePosSn);
        }
 
        String changeNearTime = entity.getChangeNearTime();
        if (changeNearTime != null) {
            stmt.bindString(43, changeNearTime);
        }
 
        String changePayPrice = entity.getChangePayPrice();
        if (changePayPrice != null) {
            stmt.bindString(44, changePayPrice);
        }
 
        String extraDateLenth = entity.getExtraDateLenth();
        if (extraDateLenth != null) {
            stmt.bindString(45, extraDateLenth);
        }
 
        String extraDate = entity.getExtraDate();
        if (extraDate != null) {
            stmt.bindString(46, extraDate);
        }
 
        String newExtraDate = entity.getNewExtraDate();
        if (newExtraDate != null) {
            stmt.bindString(47, newExtraDate);
        }
        stmt.bindLong(48, entity.getCreatTime());
 
        String updateFlag = entity.getUpdateFlag();
        if (updateFlag != null) {
            stmt.bindString(49, updateFlag);
        }
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(50, qrCode);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(51, status);
        }
        stmt.bindLong(52, entity.getBalance());
        stmt.bindLong(53, entity.getVoiceType());
 
        String payCommand = entity.getPayCommand();
        if (payCommand != null) {
            stmt.bindString(54, payCommand);
        }
 
        String lastTradeCount = entity.getLastTradeCount();
        if (lastTradeCount != null) {
            stmt.bindString(55, lastTradeCount);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public XdRecord readEntity(Cursor cursor, int offset) {
        XdRecord entity = new XdRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // recordTag
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // recordLenth
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // flag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // recordVersion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // recordBigType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // recordSmallType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tradeType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // industryType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // payType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // merchantNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // companyNum
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // unionNum
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lineNum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // carNum
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // stationNum
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // longitude
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // latitude
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // posSn
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // mainPSAM
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // tradePSAM
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // driverNum
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // useCardnum
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // tradeTime
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // tradeNum
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // tradePay
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // tradePayNum
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // tradeDiscount
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // cardTradeCount
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // cardTradeTAC
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // samTradeCount
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // cityCode
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // creatCardMechanism
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // mainCardType
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // childCardType
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // direction
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // inCardStatus
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // beforTradePosSn
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // beforTradeType
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // beforTradeTime
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // beforTradePrice
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // changeLineNum
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // changePosSn
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // changeNearTime
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // changePayPrice
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // extraDateLenth
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // extraDate
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // newExtraDate
            cursor.getLong(offset + 47), // creatTime
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // updateFlag
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // qrCode
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // status
            cursor.getLong(offset + 51), // balance
            cursor.getInt(offset + 52), // voiceType
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // payCommand
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54) // lastTradeCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, XdRecord entity, int offset) {
        entity.setRecordTag(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRecordLenth(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecordVersion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecordBigType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRecordSmallType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTradeType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIndustryType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPayType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMerchantNum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompanyNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUnionNum(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLineNum(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCarNum(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStationNum(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLongitude(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLatitude(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPosSn(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMainPSAM(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTradePSAM(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDriverNum(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUseCardnum(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setTradeTime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setTradeNum(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTradePay(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTradePayNum(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTradeDiscount(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCardTradeCount(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCardTradeTAC(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setSamTradeCount(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCityCode(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCreatCardMechanism(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setMainCardType(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setChildCardType(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setDirection(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setInCardStatus(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setBeforTradePosSn(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setBeforTradeType(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setBeforTradeTime(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setBeforTradePrice(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setChangeLineNum(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setChangePosSn(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setChangeNearTime(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setChangePayPrice(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setExtraDateLenth(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setExtraDate(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setNewExtraDate(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setCreatTime(cursor.getLong(offset + 47));
        entity.setUpdateFlag(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setQrCode(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setStatus(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setBalance(cursor.getLong(offset + 51));
        entity.setVoiceType(cursor.getInt(offset + 52));
        entity.setPayCommand(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setLastTradeCount(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(XdRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(XdRecord entity) {
        return null;
    }

    @Override
    public boolean hasKey(XdRecord entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
