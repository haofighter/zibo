package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.record.AppParamInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_PARAM_INFO".
*/
public class AppParamInfoDao extends AbstractDao<AppParamInfo, Void> {

    public static final String TABLENAME = "APP_PARAM_INFO";

    /**
     * Properties of entity AppParamInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RunId = new Property(0, long.class, "runId", false, "RUN_ID");
        public final static Property DriverNo = new Property(1, String.class, "driverNo", false, "DRIVER_NO");
        public final static Property LinNo = new Property(2, String.class, "linNo", false, "LIN_NO");
        public final static Property LinName = new Property(3, String.class, "linName", false, "LIN_NAME");
        public final static Property BusNo = new Property(4, String.class, "busNo", false, "BUS_NO");
        public final static Property BasePrice = new Property(5, int.class, "basePrice", false, "BASE_PRICE");
        public final static Property LinVer = new Property(6, String.class, "linVer", false, "LIN_VER");
        public final static Property LineType = new Property(7, String.class, "lineType", false, "LINE_TYPE");
    }


    public AppParamInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppParamInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_PARAM_INFO\" (" + //
                "\"RUN_ID\" INTEGER NOT NULL UNIQUE ," + // 0: runId
                "\"DRIVER_NO\" TEXT," + // 1: driverNo
                "\"LIN_NO\" TEXT," + // 2: linNo
                "\"LIN_NAME\" TEXT," + // 3: linName
                "\"BUS_NO\" TEXT," + // 4: busNo
                "\"BASE_PRICE\" INTEGER NOT NULL ," + // 5: basePrice
                "\"LIN_VER\" TEXT," + // 6: linVer
                "\"LINE_TYPE\" TEXT);"); // 7: lineType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_PARAM_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppParamInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRunId());
 
        String driverNo = entity.getDriverNo();
        if (driverNo != null) {
            stmt.bindString(2, driverNo);
        }
 
        String linNo = entity.getLinNo();
        if (linNo != null) {
            stmt.bindString(3, linNo);
        }
 
        String linName = entity.getLinName();
        if (linName != null) {
            stmt.bindString(4, linName);
        }
 
        String busNo = entity.getBusNo();
        if (busNo != null) {
            stmt.bindString(5, busNo);
        }
        stmt.bindLong(6, entity.getBasePrice());
 
        String linVer = entity.getLinVer();
        if (linVer != null) {
            stmt.bindString(7, linVer);
        }
 
        String lineType = entity.getLineType();
        if (lineType != null) {
            stmt.bindString(8, lineType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppParamInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRunId());
 
        String driverNo = entity.getDriverNo();
        if (driverNo != null) {
            stmt.bindString(2, driverNo);
        }
 
        String linNo = entity.getLinNo();
        if (linNo != null) {
            stmt.bindString(3, linNo);
        }
 
        String linName = entity.getLinName();
        if (linName != null) {
            stmt.bindString(4, linName);
        }
 
        String busNo = entity.getBusNo();
        if (busNo != null) {
            stmt.bindString(5, busNo);
        }
        stmt.bindLong(6, entity.getBasePrice());
 
        String linVer = entity.getLinVer();
        if (linVer != null) {
            stmt.bindString(7, linVer);
        }
 
        String lineType = entity.getLineType();
        if (lineType != null) {
            stmt.bindString(8, lineType);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AppParamInfo readEntity(Cursor cursor, int offset) {
        AppParamInfo entity = new AppParamInfo( //
            cursor.getLong(offset + 0), // runId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // driverNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // linNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // linName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // busNo
            cursor.getInt(offset + 5), // basePrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // linVer
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // lineType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppParamInfo entity, int offset) {
        entity.setRunId(cursor.getLong(offset + 0));
        entity.setDriverNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLinNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLinName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBusNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBasePrice(cursor.getInt(offset + 5));
        entity.setLinVer(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLineType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AppParamInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AppParamInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(AppParamInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
