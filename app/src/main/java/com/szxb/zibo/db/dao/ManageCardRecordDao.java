package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.record.ManageCardRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MANAGE_CARD_RECORD".
*/
public class ManageCardRecordDao extends AbstractDao<ManageCardRecord, Long> {

    public static final String TABLENAME = "MANAGE_CARD_RECORD";

    /**
     * Properties of entity ManageCardRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BizType = new Property(1, String.class, "bizType", false, "BIZ_TYPE");
        public final static Property TransSeqId = new Property(2, String.class, "transSeqId", false, "TRANS_SEQ_ID");
        public final static Property SignType = new Property(3, String.class, "signType", false, "SIGN_TYPE");
        public final static Property TransCityCode = new Property(4, String.class, "transCityCode", false, "TRANS_CITY_CODE");
        public final static Property Acquirer = new Property(5, String.class, "acquirer", false, "ACQUIRER");
        public final static Property TerminalId = new Property(6, String.class, "terminalId", false, "TERMINAL_ID");
        public final static Property PsamCardId = new Property(7, String.class, "psamCardId", false, "PSAM_CARD_ID");
        public final static Property PsamTerminalId = new Property(8, String.class, "psamTerminalId", false, "PSAM_TERMINAL_ID");
        public final static Property LineId = new Property(9, String.class, "lineId", false, "LINE_ID");
        public final static Property TransTime = new Property(10, String.class, "transTime", false, "TRANS_TIME");
        public final static Property RefeNo = new Property(11, String.class, "refeNo", false, "REFE_NO");
        public final static Property VeguckeNO = new Property(12, String.class, "veguckeNO", false, "VEGUCKE_NO");
        public final static Property CardId = new Property(13, String.class, "cardId", false, "CARD_ID");
        public final static Property JobNO = new Property(14, String.class, "jobNO", false, "JOB_NO");
        public final static Property UpStatus = new Property(15, int.class, "UpStatus", false, "UP_STATUS");
        public final static Property CreateTime = new Property(16, int.class, "createTime", false, "CREATE_TIME");
        public final static Property Rev1 = new Property(17, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(18, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(19, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(20, String.class, "rev4", false, "REV4");
        public final static Property Rev5 = new Property(21, String.class, "rev5", false, "REV5");
        public final static Property Rev6 = new Property(22, String.class, "rev6", false, "REV6");
        public final static Property Rev7 = new Property(23, String.class, "rev7", false, "REV7");
        public final static Property Rev8 = new Property(24, String.class, "rev8", false, "REV8");
        public final static Property Rev9 = new Property(25, String.class, "rev9", false, "REV9");
        public final static Property Rev10 = new Property(26, String.class, "rev10", false, "REV10");
    }


    public ManageCardRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ManageCardRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MANAGE_CARD_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BIZ_TYPE\" TEXT," + // 1: bizType
                "\"TRANS_SEQ_ID\" TEXT," + // 2: transSeqId
                "\"SIGN_TYPE\" TEXT," + // 3: signType
                "\"TRANS_CITY_CODE\" TEXT," + // 4: transCityCode
                "\"ACQUIRER\" TEXT," + // 5: acquirer
                "\"TERMINAL_ID\" TEXT," + // 6: terminalId
                "\"PSAM_CARD_ID\" TEXT," + // 7: psamCardId
                "\"PSAM_TERMINAL_ID\" TEXT," + // 8: psamTerminalId
                "\"LINE_ID\" TEXT," + // 9: lineId
                "\"TRANS_TIME\" TEXT," + // 10: transTime
                "\"REFE_NO\" TEXT," + // 11: refeNo
                "\"VEGUCKE_NO\" TEXT," + // 12: veguckeNO
                "\"CARD_ID\" TEXT," + // 13: cardId
                "\"JOB_NO\" TEXT," + // 14: jobNO
                "\"UP_STATUS\" INTEGER NOT NULL ," + // 15: UpStatus
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 16: createTime
                "\"REV1\" TEXT," + // 17: rev1
                "\"REV2\" TEXT," + // 18: rev2
                "\"REV3\" TEXT," + // 19: rev3
                "\"REV4\" TEXT," + // 20: rev4
                "\"REV5\" TEXT," + // 21: rev5
                "\"REV6\" TEXT," + // 22: rev6
                "\"REV7\" TEXT," + // 23: rev7
                "\"REV8\" TEXT," + // 24: rev8
                "\"REV9\" TEXT," + // 25: rev9
                "\"REV10\" TEXT);"); // 26: rev10
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MANAGE_CARD_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ManageCardRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bizType = entity.getBizType();
        if (bizType != null) {
            stmt.bindString(2, bizType);
        }
 
        String transSeqId = entity.getTransSeqId();
        if (transSeqId != null) {
            stmt.bindString(3, transSeqId);
        }
 
        String signType = entity.getSignType();
        if (signType != null) {
            stmt.bindString(4, signType);
        }
 
        String transCityCode = entity.getTransCityCode();
        if (transCityCode != null) {
            stmt.bindString(5, transCityCode);
        }
 
        String acquirer = entity.getAcquirer();
        if (acquirer != null) {
            stmt.bindString(6, acquirer);
        }
 
        String terminalId = entity.getTerminalId();
        if (terminalId != null) {
            stmt.bindString(7, terminalId);
        }
 
        String psamCardId = entity.getPsamCardId();
        if (psamCardId != null) {
            stmt.bindString(8, psamCardId);
        }
 
        String psamTerminalId = entity.getPsamTerminalId();
        if (psamTerminalId != null) {
            stmt.bindString(9, psamTerminalId);
        }
 
        String lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindString(10, lineId);
        }
 
        String transTime = entity.getTransTime();
        if (transTime != null) {
            stmt.bindString(11, transTime);
        }
 
        String refeNo = entity.getRefeNo();
        if (refeNo != null) {
            stmt.bindString(12, refeNo);
        }
 
        String veguckeNO = entity.getVeguckeNO();
        if (veguckeNO != null) {
            stmt.bindString(13, veguckeNO);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(14, cardId);
        }
 
        String jobNO = entity.getJobNO();
        if (jobNO != null) {
            stmt.bindString(15, jobNO);
        }
        stmt.bindLong(16, entity.getUpStatus());
        stmt.bindLong(17, entity.getCreateTime());
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(18, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(19, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(20, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(21, rev4);
        }
 
        String rev5 = entity.getRev5();
        if (rev5 != null) {
            stmt.bindString(22, rev5);
        }
 
        String rev6 = entity.getRev6();
        if (rev6 != null) {
            stmt.bindString(23, rev6);
        }
 
        String rev7 = entity.getRev7();
        if (rev7 != null) {
            stmt.bindString(24, rev7);
        }
 
        String rev8 = entity.getRev8();
        if (rev8 != null) {
            stmt.bindString(25, rev8);
        }
 
        String rev9 = entity.getRev9();
        if (rev9 != null) {
            stmt.bindString(26, rev9);
        }
 
        String rev10 = entity.getRev10();
        if (rev10 != null) {
            stmt.bindString(27, rev10);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ManageCardRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bizType = entity.getBizType();
        if (bizType != null) {
            stmt.bindString(2, bizType);
        }
 
        String transSeqId = entity.getTransSeqId();
        if (transSeqId != null) {
            stmt.bindString(3, transSeqId);
        }
 
        String signType = entity.getSignType();
        if (signType != null) {
            stmt.bindString(4, signType);
        }
 
        String transCityCode = entity.getTransCityCode();
        if (transCityCode != null) {
            stmt.bindString(5, transCityCode);
        }
 
        String acquirer = entity.getAcquirer();
        if (acquirer != null) {
            stmt.bindString(6, acquirer);
        }
 
        String terminalId = entity.getTerminalId();
        if (terminalId != null) {
            stmt.bindString(7, terminalId);
        }
 
        String psamCardId = entity.getPsamCardId();
        if (psamCardId != null) {
            stmt.bindString(8, psamCardId);
        }
 
        String psamTerminalId = entity.getPsamTerminalId();
        if (psamTerminalId != null) {
            stmt.bindString(9, psamTerminalId);
        }
 
        String lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindString(10, lineId);
        }
 
        String transTime = entity.getTransTime();
        if (transTime != null) {
            stmt.bindString(11, transTime);
        }
 
        String refeNo = entity.getRefeNo();
        if (refeNo != null) {
            stmt.bindString(12, refeNo);
        }
 
        String veguckeNO = entity.getVeguckeNO();
        if (veguckeNO != null) {
            stmt.bindString(13, veguckeNO);
        }
 
        String cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindString(14, cardId);
        }
 
        String jobNO = entity.getJobNO();
        if (jobNO != null) {
            stmt.bindString(15, jobNO);
        }
        stmt.bindLong(16, entity.getUpStatus());
        stmt.bindLong(17, entity.getCreateTime());
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(18, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(19, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(20, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(21, rev4);
        }
 
        String rev5 = entity.getRev5();
        if (rev5 != null) {
            stmt.bindString(22, rev5);
        }
 
        String rev6 = entity.getRev6();
        if (rev6 != null) {
            stmt.bindString(23, rev6);
        }
 
        String rev7 = entity.getRev7();
        if (rev7 != null) {
            stmt.bindString(24, rev7);
        }
 
        String rev8 = entity.getRev8();
        if (rev8 != null) {
            stmt.bindString(25, rev8);
        }
 
        String rev9 = entity.getRev9();
        if (rev9 != null) {
            stmt.bindString(26, rev9);
        }
 
        String rev10 = entity.getRev10();
        if (rev10 != null) {
            stmt.bindString(27, rev10);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ManageCardRecord readEntity(Cursor cursor, int offset) {
        ManageCardRecord entity = new ManageCardRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bizType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // transSeqId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // signType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // transCityCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // acquirer
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // terminalId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // psamCardId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // psamTerminalId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lineId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // transTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // refeNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // veguckeNO
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // cardId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // jobNO
            cursor.getInt(offset + 15), // UpStatus
            cursor.getInt(offset + 16), // createTime
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // rev1
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // rev2
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // rev3
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // rev4
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // rev5
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // rev6
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // rev7
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // rev8
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // rev9
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // rev10
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ManageCardRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBizType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTransSeqId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSignType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTransCityCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAcquirer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTerminalId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPsamCardId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPsamTerminalId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLineId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTransTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRefeNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVeguckeNO(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCardId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setJobNO(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUpStatus(cursor.getInt(offset + 15));
        entity.setCreateTime(cursor.getInt(offset + 16));
        entity.setRev1(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setRev2(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setRev3(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRev4(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRev5(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRev6(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRev7(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRev8(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setRev9(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setRev10(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ManageCardRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ManageCardRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ManageCardRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
