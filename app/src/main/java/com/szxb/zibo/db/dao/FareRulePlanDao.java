package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.config.zibo.line.FareRulePlan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FARE_RULE_PLAN".
*/
public class FareRulePlanDao extends AbstractDao<FareRulePlan, Void> {

    public static final String TABLENAME = "FARE_RULE_PLAN";

    /**
     * Properties of entity FareRulePlan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FareRulePlanNum = new Property(0, String.class, "fareRulePlanNum", false, "FARE_RULE_PLAN_NUM");
        public final static Property FareRuleType = new Property(1, String.class, "fareRuleType", false, "FARE_RULE_TYPE");
        public final static Property FareRulePrice = new Property(2, String.class, "fareRulePrice", false, "FARE_RULE_PRICE");
        public final static Property UnkownString = new Property(3, String.class, "unkownString", false, "UNKOWN_STRING");
        public final static Property UnkownTag = new Property(4, String.class, "unkownTag", false, "UNKOWN_TAG");
    }


    public FareRulePlanDao(DaoConfig config) {
        super(config);
    }
    
    public FareRulePlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FARE_RULE_PLAN\" (" + //
                "\"FARE_RULE_PLAN_NUM\" TEXT," + // 0: fareRulePlanNum
                "\"FARE_RULE_TYPE\" TEXT," + // 1: fareRuleType
                "\"FARE_RULE_PRICE\" TEXT," + // 2: fareRulePrice
                "\"UNKOWN_STRING\" TEXT," + // 3: unkownString
                "\"UNKOWN_TAG\" TEXT);"); // 4: unkownTag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FARE_RULE_PLAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FareRulePlan entity) {
        stmt.clearBindings();
 
        String fareRulePlanNum = entity.getFareRulePlanNum();
        if (fareRulePlanNum != null) {
            stmt.bindString(1, fareRulePlanNum);
        }
 
        String fareRuleType = entity.getFareRuleType();
        if (fareRuleType != null) {
            stmt.bindString(2, fareRuleType);
        }
 
        String fareRulePrice = entity.getFareRulePrice();
        if (fareRulePrice != null) {
            stmt.bindString(3, fareRulePrice);
        }
 
        String unkownString = entity.getUnkownString();
        if (unkownString != null) {
            stmt.bindString(4, unkownString);
        }
 
        String unkownTag = entity.getUnkownTag();
        if (unkownTag != null) {
            stmt.bindString(5, unkownTag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FareRulePlan entity) {
        stmt.clearBindings();
 
        String fareRulePlanNum = entity.getFareRulePlanNum();
        if (fareRulePlanNum != null) {
            stmt.bindString(1, fareRulePlanNum);
        }
 
        String fareRuleType = entity.getFareRuleType();
        if (fareRuleType != null) {
            stmt.bindString(2, fareRuleType);
        }
 
        String fareRulePrice = entity.getFareRulePrice();
        if (fareRulePrice != null) {
            stmt.bindString(3, fareRulePrice);
        }
 
        String unkownString = entity.getUnkownString();
        if (unkownString != null) {
            stmt.bindString(4, unkownString);
        }
 
        String unkownTag = entity.getUnkownTag();
        if (unkownTag != null) {
            stmt.bindString(5, unkownTag);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FareRulePlan readEntity(Cursor cursor, int offset) {
        FareRulePlan entity = new FareRulePlan( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fareRulePlanNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fareRuleType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fareRulePrice
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // unkownString
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // unkownTag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FareRulePlan entity, int offset) {
        entity.setFareRulePlanNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFareRuleType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFareRulePrice(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUnkownString(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnkownTag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FareRulePlan entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FareRulePlan entity) {
        return null;
    }

    @Override
    public boolean hasKey(FareRulePlan entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
