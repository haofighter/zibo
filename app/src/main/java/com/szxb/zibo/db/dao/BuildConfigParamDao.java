package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.config.haikou.param.BuildConfigParam;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BUILD_CONFIG_PARAM".
*/
public class BuildConfigParamDao extends AbstractDao<BuildConfigParam, Long> {

    public static final String TABLENAME = "BUILD_CONFIG_PARAM";

    /**
     * Properties of entity BuildConfigParam.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ip = new Property(1, String.class, "ip", false, "IP");
        public final static Property Port = new Property(2, int.class, "port", false, "PORT");
        public final static Property User = new Property(3, String.class, "user", false, "USER");
        public final static Property Psw = new Property(4, String.class, "psw", false, "PSW");
        public final static Property Mch_id = new Property(5, String.class, "mch_id", false, "MCH_ID");
        public final static Property City_code = new Property(6, String.class, "city_code", false, "CITY_CODE");
        public final static Property Url_ip = new Property(7, String.class, "url_ip", false, "URL_IP");
        public final static Property City = new Property(8, String.class, "city", false, "CITY");
        public final static Property Organization = new Property(9, String.class, "organization", false, "ORGANIZATION");
        public final static Property Is_supp_scan_pay = new Property(10, boolean.class, "is_supp_scan_pay", false, "IS_SUPP_SCAN_PAY");
        public final static Property Is_supp_ic_pay = new Property(11, boolean.class, "is_supp_ic_pay", false, "IS_SUPP_IC_PAY");
        public final static Property Is_supp_union_pay = new Property(12, boolean.class, "is_supp_union_pay", false, "IS_SUPP_UNION_PAY");
        public final static Property Is_supp_ali_pay = new Property(13, boolean.class, "is_supp_ali_pay", false, "IS_SUPP_ALI_PAY");
        public final static Property UpdateTime = new Property(14, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Is_supp_key_board = new Property(15, boolean.class, "is_supp_key_board", false, "IS_SUPP_KEY_BOARD");
    }


    public BuildConfigParamDao(DaoConfig config) {
        super(config);
    }
    
    public BuildConfigParamDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BUILD_CONFIG_PARAM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IP\" TEXT," + // 1: ip
                "\"PORT\" INTEGER NOT NULL ," + // 2: port
                "\"USER\" TEXT," + // 3: user
                "\"PSW\" TEXT," + // 4: psw
                "\"MCH_ID\" TEXT," + // 5: mch_id
                "\"CITY_CODE\" TEXT," + // 6: city_code
                "\"URL_IP\" TEXT," + // 7: url_ip
                "\"CITY\" TEXT," + // 8: city
                "\"ORGANIZATION\" TEXT," + // 9: organization
                "\"IS_SUPP_SCAN_PAY\" INTEGER NOT NULL ," + // 10: is_supp_scan_pay
                "\"IS_SUPP_IC_PAY\" INTEGER NOT NULL ," + // 11: is_supp_ic_pay
                "\"IS_SUPP_UNION_PAY\" INTEGER NOT NULL ," + // 12: is_supp_union_pay
                "\"IS_SUPP_ALI_PAY\" INTEGER NOT NULL ," + // 13: is_supp_ali_pay
                "\"UPDATE_TIME\" INTEGER," + // 14: updateTime
                "\"IS_SUPP_KEY_BOARD\" INTEGER NOT NULL );"); // 15: is_supp_key_board
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BUILD_CONFIG_PARAM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BuildConfigParam entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(2, ip);
        }
        stmt.bindLong(3, entity.getPort());
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(4, user);
        }
 
        String psw = entity.getPsw();
        if (psw != null) {
            stmt.bindString(5, psw);
        }
 
        String mch_id = entity.getMch_id();
        if (mch_id != null) {
            stmt.bindString(6, mch_id);
        }
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(7, city_code);
        }
 
        String url_ip = entity.getUrl_ip();
        if (url_ip != null) {
            stmt.bindString(8, url_ip);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(9, city);
        }
 
        String organization = entity.getOrganization();
        if (organization != null) {
            stmt.bindString(10, organization);
        }
        stmt.bindLong(11, entity.getIs_supp_scan_pay() ? 1L: 0L);
        stmt.bindLong(12, entity.getIs_supp_ic_pay() ? 1L: 0L);
        stmt.bindLong(13, entity.getIs_supp_union_pay() ? 1L: 0L);
        stmt.bindLong(14, entity.getIs_supp_ali_pay() ? 1L: 0L);
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(15, updateTime);
        }
        stmt.bindLong(16, entity.getIs_supp_key_board() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BuildConfigParam entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(2, ip);
        }
        stmt.bindLong(3, entity.getPort());
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(4, user);
        }
 
        String psw = entity.getPsw();
        if (psw != null) {
            stmt.bindString(5, psw);
        }
 
        String mch_id = entity.getMch_id();
        if (mch_id != null) {
            stmt.bindString(6, mch_id);
        }
 
        String city_code = entity.getCity_code();
        if (city_code != null) {
            stmt.bindString(7, city_code);
        }
 
        String url_ip = entity.getUrl_ip();
        if (url_ip != null) {
            stmt.bindString(8, url_ip);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(9, city);
        }
 
        String organization = entity.getOrganization();
        if (organization != null) {
            stmt.bindString(10, organization);
        }
        stmt.bindLong(11, entity.getIs_supp_scan_pay() ? 1L: 0L);
        stmt.bindLong(12, entity.getIs_supp_ic_pay() ? 1L: 0L);
        stmt.bindLong(13, entity.getIs_supp_union_pay() ? 1L: 0L);
        stmt.bindLong(14, entity.getIs_supp_ali_pay() ? 1L: 0L);
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(15, updateTime);
        }
        stmt.bindLong(16, entity.getIs_supp_key_board() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BuildConfigParam readEntity(Cursor cursor, int offset) {
        BuildConfigParam entity = new BuildConfigParam( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ip
            cursor.getInt(offset + 2), // port
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // psw
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mch_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // city_code
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url_ip
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // city
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // organization
            cursor.getShort(offset + 10) != 0, // is_supp_scan_pay
            cursor.getShort(offset + 11) != 0, // is_supp_ic_pay
            cursor.getShort(offset + 12) != 0, // is_supp_union_pay
            cursor.getShort(offset + 13) != 0, // is_supp_ali_pay
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // updateTime
            cursor.getShort(offset + 15) != 0 // is_supp_key_board
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BuildConfigParam entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPort(cursor.getInt(offset + 2));
        entity.setUser(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPsw(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMch_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCity_code(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl_ip(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOrganization(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIs_supp_scan_pay(cursor.getShort(offset + 10) != 0);
        entity.setIs_supp_ic_pay(cursor.getShort(offset + 11) != 0);
        entity.setIs_supp_union_pay(cursor.getShort(offset + 12) != 0);
        entity.setIs_supp_ali_pay(cursor.getShort(offset + 13) != 0);
        entity.setUpdateTime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setIs_supp_key_board(cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BuildConfigParam entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BuildConfigParam entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BuildConfigParam entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
