package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.config.zibo.line.StationPayPrice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATION_PAY_PRICE".
*/
public class StationPayPriceDao extends AbstractDao<StationPayPrice, Void> {

    public static final String TABLENAME = "STATION_PAY_PRICE";

    /**
     * Properties of entity StationPayPrice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PriceTypeNum = new Property(0, String.class, "priceTypeNum", false, "PRICE_TYPE_NUM");
        public final static Property Up = new Property(1, int.class, "up", false, "UP");
        public final static Property Down = new Property(2, int.class, "down", false, "DOWN");
        public final static Property Price = new Property(3, long.class, "price", false, "PRICE");
    }


    public StationPayPriceDao(DaoConfig config) {
        super(config);
    }
    
    public StationPayPriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATION_PAY_PRICE\" (" + //
                "\"PRICE_TYPE_NUM\" TEXT," + // 0: priceTypeNum
                "\"UP\" INTEGER NOT NULL ," + // 1: up
                "\"DOWN\" INTEGER NOT NULL ," + // 2: down
                "\"PRICE\" INTEGER NOT NULL );"); // 3: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATION_PAY_PRICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StationPayPrice entity) {
        stmt.clearBindings();
 
        String priceTypeNum = entity.getPriceTypeNum();
        if (priceTypeNum != null) {
            stmt.bindString(1, priceTypeNum);
        }
        stmt.bindLong(2, entity.getUp());
        stmt.bindLong(3, entity.getDown());
        stmt.bindLong(4, entity.getPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StationPayPrice entity) {
        stmt.clearBindings();
 
        String priceTypeNum = entity.getPriceTypeNum();
        if (priceTypeNum != null) {
            stmt.bindString(1, priceTypeNum);
        }
        stmt.bindLong(2, entity.getUp());
        stmt.bindLong(3, entity.getDown());
        stmt.bindLong(4, entity.getPrice());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public StationPayPrice readEntity(Cursor cursor, int offset) {
        StationPayPrice entity = new StationPayPrice( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // priceTypeNum
            cursor.getInt(offset + 1), // up
            cursor.getInt(offset + 2), // down
            cursor.getLong(offset + 3) // price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StationPayPrice entity, int offset) {
        entity.setPriceTypeNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUp(cursor.getInt(offset + 1));
        entity.setDown(cursor.getInt(offset + 2));
        entity.setPrice(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(StationPayPrice entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(StationPayPrice entity) {
        return null;
    }

    @Override
    public boolean hasKey(StationPayPrice entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
