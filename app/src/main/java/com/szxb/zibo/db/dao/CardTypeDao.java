package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.config.zibo.line.CardType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_TYPE".
*/
public class CardTypeDao extends AbstractDao<CardType, Void> {

    public static final String TABLENAME = "CARD_TYPE";

    /**
     * Properties of entity CardType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CardTypeNum = new Property(0, String.class, "cardTypeNum", false, "CARD_TYPE_NUM");
        public final static Property Deposit = new Property(1, String.class, "deposit", false, "DEPOSIT");
        public final static Property Cost = new Property(2, String.class, "cost", false, "COST");
        public final static Property EffectiveTime = new Property(3, String.class, "effectiveTime", false, "EFFECTIVE_TIME");
    }


    public CardTypeDao(DaoConfig config) {
        super(config);
    }
    
    public CardTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_TYPE\" (" + //
                "\"CARD_TYPE_NUM\" TEXT," + // 0: cardTypeNum
                "\"DEPOSIT\" TEXT," + // 1: deposit
                "\"COST\" TEXT," + // 2: cost
                "\"EFFECTIVE_TIME\" TEXT);"); // 3: effectiveTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_TYPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardType entity) {
        stmt.clearBindings();
 
        String cardTypeNum = entity.getCardTypeNum();
        if (cardTypeNum != null) {
            stmt.bindString(1, cardTypeNum);
        }
 
        String deposit = entity.getDeposit();
        if (deposit != null) {
            stmt.bindString(2, deposit);
        }
 
        String cost = entity.getCost();
        if (cost != null) {
            stmt.bindString(3, cost);
        }
 
        String effectiveTime = entity.getEffectiveTime();
        if (effectiveTime != null) {
            stmt.bindString(4, effectiveTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardType entity) {
        stmt.clearBindings();
 
        String cardTypeNum = entity.getCardTypeNum();
        if (cardTypeNum != null) {
            stmt.bindString(1, cardTypeNum);
        }
 
        String deposit = entity.getDeposit();
        if (deposit != null) {
            stmt.bindString(2, deposit);
        }
 
        String cost = entity.getCost();
        if (cost != null) {
            stmt.bindString(3, cost);
        }
 
        String effectiveTime = entity.getEffectiveTime();
        if (effectiveTime != null) {
            stmt.bindString(4, effectiveTime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public CardType readEntity(Cursor cursor, int offset) {
        CardType entity = new CardType( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cardTypeNum
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deposit
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cost
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // effectiveTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardType entity, int offset) {
        entity.setCardTypeNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeposit(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCost(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEffectiveTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(CardType entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(CardType entity) {
        return null;
    }

    @Override
    public boolean hasKey(CardType entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
