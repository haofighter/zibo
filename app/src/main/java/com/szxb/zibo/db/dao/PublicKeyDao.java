package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.config.zibo.PublicKey;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUBLIC_KEY".
*/
public class PublicKeyDao extends AbstractDao<PublicKey, Void> {

    public static final String TABLENAME = "PUBLIC_KEY";

    /**
     * Properties of entity PublicKey.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PublicCreatTag = new Property(0, String.class, "publicCreatTag", false, "PUBLIC_CREAT_TAG");
        public final static Property PublicKeyTag = new Property(1, int.class, "publicKeyTag", false, "PUBLIC_KEY_TAG");
        public final static Property HashAlgorithmTag = new Property(2, String.class, "hashAlgorithmTag", false, "HASH_ALGORITHM_TAG");
        public final static Property PublicAlgorithmTag = new Property(3, String.class, "publicAlgorithmTag", false, "PUBLIC_ALGORITHM_TAG");
        public final static Property PublicIndexTag = new Property(4, String.class, "publicIndexTag", false, "PUBLIC_INDEX_TAG");
        public final static Property PublicLenth = new Property(5, String.class, "publicLenth", false, "PUBLIC_LENTH");
        public final static Property PublicKey = new Property(6, String.class, "publicKey", false, "PUBLIC_KEY");
        public final static Property Rev1 = new Property(7, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(8, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(9, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(10, String.class, "rev4", false, "REV4");
        public final static Property Rev5 = new Property(11, String.class, "rev5", false, "REV5");
    }


    public PublicKeyDao(DaoConfig config) {
        super(config);
    }
    
    public PublicKeyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUBLIC_KEY\" (" + //
                "\"PUBLIC_CREAT_TAG\" TEXT," + // 0: publicCreatTag
                "\"PUBLIC_KEY_TAG\" INTEGER NOT NULL ," + // 1: publicKeyTag
                "\"HASH_ALGORITHM_TAG\" TEXT," + // 2: hashAlgorithmTag
                "\"PUBLIC_ALGORITHM_TAG\" TEXT," + // 3: publicAlgorithmTag
                "\"PUBLIC_INDEX_TAG\" TEXT," + // 4: publicIndexTag
                "\"PUBLIC_LENTH\" TEXT," + // 5: publicLenth
                "\"PUBLIC_KEY\" TEXT," + // 6: publicKey
                "\"REV1\" TEXT," + // 7: rev1
                "\"REV2\" TEXT," + // 8: rev2
                "\"REV3\" TEXT," + // 9: rev3
                "\"REV4\" TEXT," + // 10: rev4
                "\"REV5\" TEXT);"); // 11: rev5
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUBLIC_KEY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PublicKey entity) {
        stmt.clearBindings();
 
        String publicCreatTag = entity.getPublicCreatTag();
        if (publicCreatTag != null) {
            stmt.bindString(1, publicCreatTag);
        }
        stmt.bindLong(2, entity.getPublicKeyTag());
 
        String hashAlgorithmTag = entity.getHashAlgorithmTag();
        if (hashAlgorithmTag != null) {
            stmt.bindString(3, hashAlgorithmTag);
        }
 
        String publicAlgorithmTag = entity.getPublicAlgorithmTag();
        if (publicAlgorithmTag != null) {
            stmt.bindString(4, publicAlgorithmTag);
        }
 
        String publicIndexTag = entity.getPublicIndexTag();
        if (publicIndexTag != null) {
            stmt.bindString(5, publicIndexTag);
        }
 
        String publicLenth = entity.getPublicLenth();
        if (publicLenth != null) {
            stmt.bindString(6, publicLenth);
        }
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(7, publicKey);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(8, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(9, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(10, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(11, rev4);
        }
 
        String rev5 = entity.getRev5();
        if (rev5 != null) {
            stmt.bindString(12, rev5);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PublicKey entity) {
        stmt.clearBindings();
 
        String publicCreatTag = entity.getPublicCreatTag();
        if (publicCreatTag != null) {
            stmt.bindString(1, publicCreatTag);
        }
        stmt.bindLong(2, entity.getPublicKeyTag());
 
        String hashAlgorithmTag = entity.getHashAlgorithmTag();
        if (hashAlgorithmTag != null) {
            stmt.bindString(3, hashAlgorithmTag);
        }
 
        String publicAlgorithmTag = entity.getPublicAlgorithmTag();
        if (publicAlgorithmTag != null) {
            stmt.bindString(4, publicAlgorithmTag);
        }
 
        String publicIndexTag = entity.getPublicIndexTag();
        if (publicIndexTag != null) {
            stmt.bindString(5, publicIndexTag);
        }
 
        String publicLenth = entity.getPublicLenth();
        if (publicLenth != null) {
            stmt.bindString(6, publicLenth);
        }
 
        String publicKey = entity.getPublicKey();
        if (publicKey != null) {
            stmt.bindString(7, publicKey);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(8, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(9, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(10, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(11, rev4);
        }
 
        String rev5 = entity.getRev5();
        if (rev5 != null) {
            stmt.bindString(12, rev5);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PublicKey readEntity(Cursor cursor, int offset) {
        PublicKey entity = new PublicKey( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // publicCreatTag
            cursor.getInt(offset + 1), // publicKeyTag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hashAlgorithmTag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // publicAlgorithmTag
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // publicIndexTag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // publicLenth
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // publicKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rev1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rev2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rev3
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rev4
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // rev5
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PublicKey entity, int offset) {
        entity.setPublicCreatTag(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPublicKeyTag(cursor.getInt(offset + 1));
        entity.setHashAlgorithmTag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPublicAlgorithmTag(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPublicIndexTag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPublicLenth(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPublicKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRev1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRev2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRev3(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRev4(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRev5(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PublicKey entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PublicKey entity) {
        return null;
    }

    @Override
    public boolean hasKey(PublicKey entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
