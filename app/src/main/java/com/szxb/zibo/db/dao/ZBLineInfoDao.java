package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.config.zibo.line.ZBLineInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZBLINE_INFO".
*/
public class ZBLineInfoDao extends AbstractDao<ZBLineInfo, Void> {

    public static final String TABLENAME = "ZBLINE_INFO";

    /**
     * Properties of entity ZBLineInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Acnt = new Property(0, String.class, "acnt", false, "ACNT");
        public final static Property Routeversion = new Property(1, String.class, "routeversion", false, "ROUTEVERSION");
        public final static Property Routeno = new Property(2, String.class, "routeno", false, "ROUTENO");
        public final static Property Routename = new Property(3, String.class, "routename", false, "ROUTENAME");
        public final static Property Rev1 = new Property(4, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(5, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(6, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(7, String.class, "rev4", false, "REV4");
        public final static Property Rev5 = new Property(8, String.class, "rev5", false, "REV5");
    }


    public ZBLineInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ZBLineInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZBLINE_INFO\" (" + //
                "\"ACNT\" TEXT," + // 0: acnt
                "\"ROUTEVERSION\" TEXT," + // 1: routeversion
                "\"ROUTENO\" TEXT UNIQUE ," + // 2: routeno
                "\"ROUTENAME\" TEXT," + // 3: routename
                "\"REV1\" TEXT," + // 4: rev1
                "\"REV2\" TEXT," + // 5: rev2
                "\"REV3\" TEXT," + // 6: rev3
                "\"REV4\" TEXT," + // 7: rev4
                "\"REV5\" TEXT);"); // 8: rev5
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZBLINE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZBLineInfo entity) {
        stmt.clearBindings();
 
        String acnt = entity.getAcnt();
        if (acnt != null) {
            stmt.bindString(1, acnt);
        }
 
        String routeversion = entity.getRouteversion();
        if (routeversion != null) {
            stmt.bindString(2, routeversion);
        }
 
        String routeno = entity.getRouteno();
        if (routeno != null) {
            stmt.bindString(3, routeno);
        }
 
        String routename = entity.getRoutename();
        if (routename != null) {
            stmt.bindString(4, routename);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(5, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(6, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(7, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(8, rev4);
        }
 
        String rev5 = entity.getRev5();
        if (rev5 != null) {
            stmt.bindString(9, rev5);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZBLineInfo entity) {
        stmt.clearBindings();
 
        String acnt = entity.getAcnt();
        if (acnt != null) {
            stmt.bindString(1, acnt);
        }
 
        String routeversion = entity.getRouteversion();
        if (routeversion != null) {
            stmt.bindString(2, routeversion);
        }
 
        String routeno = entity.getRouteno();
        if (routeno != null) {
            stmt.bindString(3, routeno);
        }
 
        String routename = entity.getRoutename();
        if (routename != null) {
            stmt.bindString(4, routename);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(5, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(6, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(7, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(8, rev4);
        }
 
        String rev5 = entity.getRev5();
        if (rev5 != null) {
            stmt.bindString(9, rev5);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ZBLineInfo readEntity(Cursor cursor, int offset) {
        ZBLineInfo entity = new ZBLineInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // acnt
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // routeversion
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // routeno
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // routename
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // rev1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rev2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // rev3
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rev4
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // rev5
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZBLineInfo entity, int offset) {
        entity.setAcnt(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRouteversion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRouteno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoutename(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRev1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRev2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRev3(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRev4(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRev5(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ZBLineInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ZBLineInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(ZBLineInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
