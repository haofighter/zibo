package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.config.zibo.line.StationName;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATION_NAME".
*/
public class StationNameDao extends AbstractDao<StationName, Long> {

    public static final String TABLENAME = "STATION_NAME";

    /**
     * Properties of entity StationName.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PriceTypeNum = new Property(1, String.class, "priceTypeNum", false, "PRICE_TYPE_NUM");
        public final static Property StationName = new Property(2, String.class, "stationName", false, "STATION_NAME");
        public final static Property Lon = new Property(3, float.class, "lon", false, "LON");
        public final static Property Lat = new Property(4, float.class, "lat", false, "LAT");
        public final static Property StationNo = new Property(5, String.class, "stationNo", false, "STATION_NO");
        public final static Property LineNo = new Property(6, String.class, "lineNo", false, "LINE_NO");
    }


    public StationNameDao(DaoConfig config) {
        super(config);
    }
    
    public StationNameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATION_NAME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRICE_TYPE_NUM\" TEXT," + // 1: priceTypeNum
                "\"STATION_NAME\" TEXT," + // 2: stationName
                "\"LON\" REAL NOT NULL ," + // 3: lon
                "\"LAT\" REAL NOT NULL ," + // 4: lat
                "\"STATION_NO\" TEXT," + // 5: stationNo
                "\"LINE_NO\" TEXT);"); // 6: lineNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATION_NAME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StationName entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String priceTypeNum = entity.getPriceTypeNum();
        if (priceTypeNum != null) {
            stmt.bindString(2, priceTypeNum);
        }
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(3, stationName);
        }
        stmt.bindDouble(4, entity.getLon());
        stmt.bindDouble(5, entity.getLat());
 
        String stationNo = entity.getStationNo();
        if (stationNo != null) {
            stmt.bindString(6, stationNo);
        }
 
        String lineNo = entity.getLineNo();
        if (lineNo != null) {
            stmt.bindString(7, lineNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StationName entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String priceTypeNum = entity.getPriceTypeNum();
        if (priceTypeNum != null) {
            stmt.bindString(2, priceTypeNum);
        }
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(3, stationName);
        }
        stmt.bindDouble(4, entity.getLon());
        stmt.bindDouble(5, entity.getLat());
 
        String stationNo = entity.getStationNo();
        if (stationNo != null) {
            stmt.bindString(6, stationNo);
        }
 
        String lineNo = entity.getLineNo();
        if (lineNo != null) {
            stmt.bindString(7, lineNo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StationName readEntity(Cursor cursor, int offset) {
        StationName entity = new StationName( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // priceTypeNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stationName
            cursor.getFloat(offset + 3), // lon
            cursor.getFloat(offset + 4), // lat
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // stationNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // lineNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StationName entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPriceTypeNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStationName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLon(cursor.getFloat(offset + 3));
        entity.setLat(cursor.getFloat(offset + 4));
        entity.setStationNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLineNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StationName entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StationName entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StationName entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
