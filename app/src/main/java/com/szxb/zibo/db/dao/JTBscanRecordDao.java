package com.szxb.zibo.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.zibo.record.JTBscanRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JTBSCAN_RECORD".
*/
public class JTBscanRecordDao extends AbstractDao<JTBscanRecord, Long> {

    public static final String TABLENAME = "JTBSCAN_RECORD";

    /**
     * Properties of entity JTBscanRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BizType = new Property(1, String.class, "bizType", false, "BIZ_TYPE");
        public final static Property Acquirer = new Property(2, String.class, "acquirer", false, "ACQUIRER");
        public final static Property Terseno = new Property(3, String.class, "terseno", false, "TERSENO");
        public final static Property TerminalId = new Property(4, String.class, "terminalId", false, "TERMINAL_ID");
        public final static Property DriverId = new Property(5, String.class, "driverId", false, "DRIVER_ID");
        public final static Property ConductorId = new Property(6, String.class, "conductorId", false, "CONDUCTOR_ID");
        public final static Property TransTime = new Property(7, String.class, "transTime", false, "TRANS_TIME");
        public final static Property TransCityCode = new Property(8, String.class, "transCityCode", false, "TRANS_CITY_CODE");
        public final static Property LineId = new Property(9, String.class, "lineId", false, "LINE_ID");
        public final static Property LineName = new Property(10, String.class, "lineName", false, "LINE_NAME");
        public final static Property Station = new Property(11, String.class, "station", false, "STATION");
        public final static Property StationName = new Property(12, String.class, "stationName", false, "STATION_NAME");
        public final static Property Currency = new Property(13, String.class, "currency", false, "CURRENCY");
        public final static Property ChargeType = new Property(14, String.class, "chargeType", false, "CHARGE_TYPE");
        public final static Property TotalFee = new Property(15, int.class, "totalFee", false, "TOTAL_FEE");
        public final static Property PayFee = new Property(16, int.class, "payFee", false, "PAY_FEE");
        public final static Property QrCode = new Property(17, String.class, "qrCode", false, "QR_CODE");
        public final static Property Busno = new Property(18, String.class, "busno", false, "BUSNO");
        public final static Property IsUpload = new Property(19, String.class, "isUpload", false, "IS_UPLOAD");
        public final static Property QrCodeData = new Property(20, String.class, "qrCodeData", false, "QR_CODE_DATA");
        public final static Property Createtime = new Property(21, Long.class, "createtime", false, "CREATETIME");
        public final static Property RepeatCount = new Property(22, int.class, "repeatCount", false, "REPEAT_COUNT");
        public final static Property BizData = new Property(23, String.class, "bizData", false, "BIZ_DATA");
        public final static Property AllDriver = new Property(24, String.class, "allDriver", false, "ALL_DRIVER");
        public final static Property CardNo = new Property(25, String.class, "cardNo", false, "CARD_NO");
        public final static Property Rev1 = new Property(26, String.class, "rev1", false, "REV1");
        public final static Property Rev2 = new Property(27, String.class, "rev2", false, "REV2");
        public final static Property Rev3 = new Property(28, String.class, "rev3", false, "REV3");
        public final static Property Rev4 = new Property(29, String.class, "rev4", false, "REV4");
        public final static Property Rev5 = new Property(30, String.class, "rev5", false, "REV5");
        public final static Property Rev6 = new Property(31, String.class, "rev6", false, "REV6");
        public final static Property Rev7 = new Property(32, String.class, "rev7", false, "REV7");
        public final static Property Rev8 = new Property(33, String.class, "rev8", false, "REV8");
        public final static Property Rev9 = new Property(34, String.class, "rev9", false, "REV9");
        public final static Property Rev10 = new Property(35, String.class, "rev10", false, "REV10");
    }


    public JTBscanRecordDao(DaoConfig config) {
        super(config);
    }
    
    public JTBscanRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JTBSCAN_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BIZ_TYPE\" TEXT," + // 1: bizType
                "\"ACQUIRER\" TEXT," + // 2: acquirer
                "\"TERSENO\" TEXT," + // 3: terseno
                "\"TERMINAL_ID\" TEXT," + // 4: terminalId
                "\"DRIVER_ID\" TEXT," + // 5: driverId
                "\"CONDUCTOR_ID\" TEXT," + // 6: conductorId
                "\"TRANS_TIME\" TEXT," + // 7: transTime
                "\"TRANS_CITY_CODE\" TEXT," + // 8: transCityCode
                "\"LINE_ID\" TEXT," + // 9: lineId
                "\"LINE_NAME\" TEXT," + // 10: lineName
                "\"STATION\" TEXT," + // 11: station
                "\"STATION_NAME\" TEXT," + // 12: stationName
                "\"CURRENCY\" TEXT," + // 13: currency
                "\"CHARGE_TYPE\" TEXT," + // 14: chargeType
                "\"TOTAL_FEE\" INTEGER NOT NULL ," + // 15: totalFee
                "\"PAY_FEE\" INTEGER NOT NULL ," + // 16: payFee
                "\"QR_CODE\" TEXT," + // 17: qrCode
                "\"BUSNO\" TEXT," + // 18: busno
                "\"IS_UPLOAD\" TEXT," + // 19: isUpload
                "\"QR_CODE_DATA\" TEXT," + // 20: qrCodeData
                "\"CREATETIME\" INTEGER," + // 21: createtime
                "\"REPEAT_COUNT\" INTEGER NOT NULL ," + // 22: repeatCount
                "\"BIZ_DATA\" TEXT," + // 23: bizData
                "\"ALL_DRIVER\" TEXT," + // 24: allDriver
                "\"CARD_NO\" TEXT," + // 25: cardNo
                "\"REV1\" TEXT," + // 26: rev1
                "\"REV2\" TEXT," + // 27: rev2
                "\"REV3\" TEXT," + // 28: rev3
                "\"REV4\" TEXT," + // 29: rev4
                "\"REV5\" TEXT," + // 30: rev5
                "\"REV6\" TEXT," + // 31: rev6
                "\"REV7\" TEXT," + // 32: rev7
                "\"REV8\" TEXT," + // 33: rev8
                "\"REV9\" TEXT," + // 34: rev9
                "\"REV10\" TEXT);"); // 35: rev10
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JTBSCAN_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JTBscanRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bizType = entity.getBizType();
        if (bizType != null) {
            stmt.bindString(2, bizType);
        }
 
        String acquirer = entity.getAcquirer();
        if (acquirer != null) {
            stmt.bindString(3, acquirer);
        }
 
        String terseno = entity.getTerseno();
        if (terseno != null) {
            stmt.bindString(4, terseno);
        }
 
        String terminalId = entity.getTerminalId();
        if (terminalId != null) {
            stmt.bindString(5, terminalId);
        }
 
        String driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindString(6, driverId);
        }
 
        String conductorId = entity.getConductorId();
        if (conductorId != null) {
            stmt.bindString(7, conductorId);
        }
 
        String transTime = entity.getTransTime();
        if (transTime != null) {
            stmt.bindString(8, transTime);
        }
 
        String transCityCode = entity.getTransCityCode();
        if (transCityCode != null) {
            stmt.bindString(9, transCityCode);
        }
 
        String lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindString(10, lineId);
        }
 
        String lineName = entity.getLineName();
        if (lineName != null) {
            stmt.bindString(11, lineName);
        }
 
        String station = entity.getStation();
        if (station != null) {
            stmt.bindString(12, station);
        }
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(13, stationName);
        }
 
        String currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindString(14, currency);
        }
 
        String chargeType = entity.getChargeType();
        if (chargeType != null) {
            stmt.bindString(15, chargeType);
        }
        stmt.bindLong(16, entity.getTotalFee());
        stmt.bindLong(17, entity.getPayFee());
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(18, qrCode);
        }
 
        String busno = entity.getBusno();
        if (busno != null) {
            stmt.bindString(19, busno);
        }
 
        String isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindString(20, isUpload);
        }
 
        String qrCodeData = entity.getQrCodeData();
        if (qrCodeData != null) {
            stmt.bindString(21, qrCodeData);
        }
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(22, createtime);
        }
        stmt.bindLong(23, entity.getRepeatCount());
 
        String bizData = entity.getBizData();
        if (bizData != null) {
            stmt.bindString(24, bizData);
        }
 
        String allDriver = entity.getAllDriver();
        if (allDriver != null) {
            stmt.bindString(25, allDriver);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(26, cardNo);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(27, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(28, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(29, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(30, rev4);
        }
 
        String rev5 = entity.getRev5();
        if (rev5 != null) {
            stmt.bindString(31, rev5);
        }
 
        String rev6 = entity.getRev6();
        if (rev6 != null) {
            stmt.bindString(32, rev6);
        }
 
        String rev7 = entity.getRev7();
        if (rev7 != null) {
            stmt.bindString(33, rev7);
        }
 
        String rev8 = entity.getRev8();
        if (rev8 != null) {
            stmt.bindString(34, rev8);
        }
 
        String rev9 = entity.getRev9();
        if (rev9 != null) {
            stmt.bindString(35, rev9);
        }
 
        String rev10 = entity.getRev10();
        if (rev10 != null) {
            stmt.bindString(36, rev10);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JTBscanRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bizType = entity.getBizType();
        if (bizType != null) {
            stmt.bindString(2, bizType);
        }
 
        String acquirer = entity.getAcquirer();
        if (acquirer != null) {
            stmt.bindString(3, acquirer);
        }
 
        String terseno = entity.getTerseno();
        if (terseno != null) {
            stmt.bindString(4, terseno);
        }
 
        String terminalId = entity.getTerminalId();
        if (terminalId != null) {
            stmt.bindString(5, terminalId);
        }
 
        String driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindString(6, driverId);
        }
 
        String conductorId = entity.getConductorId();
        if (conductorId != null) {
            stmt.bindString(7, conductorId);
        }
 
        String transTime = entity.getTransTime();
        if (transTime != null) {
            stmt.bindString(8, transTime);
        }
 
        String transCityCode = entity.getTransCityCode();
        if (transCityCode != null) {
            stmt.bindString(9, transCityCode);
        }
 
        String lineId = entity.getLineId();
        if (lineId != null) {
            stmt.bindString(10, lineId);
        }
 
        String lineName = entity.getLineName();
        if (lineName != null) {
            stmt.bindString(11, lineName);
        }
 
        String station = entity.getStation();
        if (station != null) {
            stmt.bindString(12, station);
        }
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(13, stationName);
        }
 
        String currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindString(14, currency);
        }
 
        String chargeType = entity.getChargeType();
        if (chargeType != null) {
            stmt.bindString(15, chargeType);
        }
        stmt.bindLong(16, entity.getTotalFee());
        stmt.bindLong(17, entity.getPayFee());
 
        String qrCode = entity.getQrCode();
        if (qrCode != null) {
            stmt.bindString(18, qrCode);
        }
 
        String busno = entity.getBusno();
        if (busno != null) {
            stmt.bindString(19, busno);
        }
 
        String isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindString(20, isUpload);
        }
 
        String qrCodeData = entity.getQrCodeData();
        if (qrCodeData != null) {
            stmt.bindString(21, qrCodeData);
        }
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(22, createtime);
        }
        stmt.bindLong(23, entity.getRepeatCount());
 
        String bizData = entity.getBizData();
        if (bizData != null) {
            stmt.bindString(24, bizData);
        }
 
        String allDriver = entity.getAllDriver();
        if (allDriver != null) {
            stmt.bindString(25, allDriver);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(26, cardNo);
        }
 
        String rev1 = entity.getRev1();
        if (rev1 != null) {
            stmt.bindString(27, rev1);
        }
 
        String rev2 = entity.getRev2();
        if (rev2 != null) {
            stmt.bindString(28, rev2);
        }
 
        String rev3 = entity.getRev3();
        if (rev3 != null) {
            stmt.bindString(29, rev3);
        }
 
        String rev4 = entity.getRev4();
        if (rev4 != null) {
            stmt.bindString(30, rev4);
        }
 
        String rev5 = entity.getRev5();
        if (rev5 != null) {
            stmt.bindString(31, rev5);
        }
 
        String rev6 = entity.getRev6();
        if (rev6 != null) {
            stmt.bindString(32, rev6);
        }
 
        String rev7 = entity.getRev7();
        if (rev7 != null) {
            stmt.bindString(33, rev7);
        }
 
        String rev8 = entity.getRev8();
        if (rev8 != null) {
            stmt.bindString(34, rev8);
        }
 
        String rev9 = entity.getRev9();
        if (rev9 != null) {
            stmt.bindString(35, rev9);
        }
 
        String rev10 = entity.getRev10();
        if (rev10 != null) {
            stmt.bindString(36, rev10);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public JTBscanRecord readEntity(Cursor cursor, int offset) {
        JTBscanRecord entity = new JTBscanRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bizType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // acquirer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // terseno
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // terminalId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // driverId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // conductorId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // transTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // transCityCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lineId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // lineName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // station
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // stationName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // currency
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // chargeType
            cursor.getInt(offset + 15), // totalFee
            cursor.getInt(offset + 16), // payFee
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // qrCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // busno
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // isUpload
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // qrCodeData
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // createtime
            cursor.getInt(offset + 22), // repeatCount
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // bizData
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // allDriver
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // cardNo
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // rev1
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // rev2
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // rev3
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // rev4
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // rev5
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // rev6
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // rev7
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // rev8
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // rev9
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35) // rev10
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JTBscanRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBizType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAcquirer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTerseno(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTerminalId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDriverId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setConductorId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTransTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTransCityCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLineId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLineName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStationName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCurrency(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setChargeType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTotalFee(cursor.getInt(offset + 15));
        entity.setPayFee(cursor.getInt(offset + 16));
        entity.setQrCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBusno(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIsUpload(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setQrCodeData(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCreatetime(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setRepeatCount(cursor.getInt(offset + 22));
        entity.setBizData(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAllDriver(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCardNo(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setRev1(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setRev2(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setRev3(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRev4(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setRev5(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRev6(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setRev7(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setRev8(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setRev9(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setRev10(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JTBscanRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JTBscanRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JTBscanRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
